Para fazer usar qualquer rota colocar a url que deseja, ir em 'Headers' adicionar 'Authorization' e 'Bearer token....'

Vendas

Post / http://localhost:3000/vendas
(Apenas abre o pedido)
{
    "cliente_nome":"Supermercado São João"
}

Put / http://localhost:3000/vendas/23/itens
(Para adicionar itens)
{
  "itens": [
    {
      "codigo_barras": 1234567890124,
      "quantidade": 2
    },
    {
      "codigo_barras": 7891234567111,
      "quantidade": 1
    }
  ]
}

Post  / http://localhost:3000/vendas/fechar
(Para fechar o pedido)

{
  "pedido": 28,                   
  "forma_pagamento": "Parcelado",
  "valor_total": 283.29999999999995,
  "valor_sinal": 50.00,
  "parcelas": 3
}

Post
http://localhost:3000/vendas/parcelas/pagar
{
  "forma_pagamento": "",
  "pedido": 28,
  "numero_parcela": 3
}

Post caixa 

{
    "descricao": "Aporte inicial",
    "valor": 500.00,
    "tipo": "entrada",
    "observacoes": "Dinheiro para troco"
}

{
    "descricao": "Pagamento de conta de luz",
    "valor": 120.50,
    "tipo": "saida"
}

Post produtos

{
  "codigo_barras": "7891234567890",
  "nome": "Arroz Tipo 1 - 5kg",
  "descricao": "Arroz branco tipo 1, pacote de 5kg",
  "preco_venda": 25.90,
  "preco_custo": 10.15,
  "quantidade_estoque": 100,
  "categoria": "Alimentos"
}

post clientes 

{
  "cnpj": "12.345.678/0001-90",
  "cliente_nome": "Supermercado São João",
  "email": "contato@saojoao.com.br",
  "telefone": "(11) 99999-9999",
  "logradouro": "Rua das Palmeiras",
  "numero": "123",
  "complemento": "Fundos",
  "bairro": "Jardim Primavera",
  "cidade": "São Paulo",
  "estado": "SP",
  "cep": "01234-567"
}

post funcionarios

{
  "nome": "Mariana Souza",
  "cpf": "45896214700",
  "email": "mariana.souza@empresa.com",
  "telefone": "(11) 98765-4321",
  "senha": "4589Mari_ana",
  "cargo": "Gerente",
  "logradouro": "Rua das Acácias",
  "numero": "256",
  "complemento": "Bloco B, Apto 302",
  "bairro": "Centro",
  "cidade": "São Paulo",
  "estado": "SP",
  "cep": "01001-000",
  "ativo": 1
}

post login (http://localhost:3000/auth/login)

{
  "email": "mariana.souza@empresa.com",
  "senha": "4589Mari_ana"
}


adicionar um código/referência a tabela de produtos. - ok
adicionar um cadastro de funcionarios. - ok
verificar os pontos, hífens e barras em cpf e cnpj na hora do cadastro - ok
trocar as rotas, e deixar igual ao get,put e delete de produtos - ok 
ver se é viavel tirar o slug - ok 
adicionar um vinculo entre venda e vendedor, para o caso de comissão. ok
adicionar o cliente e vendedor ao get de pedidos - http://localhost:3000/vendas/15/detalhes. ok
adicionar uma abertura de pedidos para possiveis mudanças. ok 
testar rota de vendas - ok 

adicionar responsavel pelo cadastro funcionarios, clientes e produtos.
oeganizar e decidir o que irá aparecer nos relatorios - 

1. Relatórios de Caixa e Vendas (Visão Geral) - ok
2. Autenticação e Autorização de Usuários - ok
3. Validações Mais Robustas e Tratamento de Erros Aprimorado
4. Paginação e Filtros para Listagens


/*
// Rota para FECHAR um pedido de venda (ATUALIZA ESTOQUE E CAIXA)
router.put('/:pedido/fechar', authenticateToken, authorizeRole(['Gerente', 'Vendedor', 'Caixa']), async (req, res) => {
    const { pedido } = req.params;
    const { forma_pagamento, parcelas } = req.body; // Pega forma_pagamento e parcelas do corpo da requisição
 
    if (!forma_pagamento) {
      return res.status(400).json({ message: 'A forma de pagamento é obrigatória para fechar o pedido.' });
    }
 
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();
 
        // 1. Busca o pedido e seus itens com FOR UPDATE para bloquear
        const [vendaRows] = await connection.query('SELECT * FROM vendas WHERE pedido = ? FOR UPDATE', [pedido]);
        const venda = vendaRows[0];
 
        if (!venda) {
            await connection.rollback();
            return res.status(404).json({ message: 'Pedido não encontrado.' });
        }
        if (venda.status_pedido !== 'Aberto') {
            await connection.rollback();
            return res.status(400).json({ message: `O pedido já está com status '${venda.status_pedido}'.` });
        }
 
        const [itensRows] = await connection.query('SELECT * FROM itens_venda WHERE pedido = ?', [pedido]);
        if (itensRows.length === 0) {
            await connection.rollback();
            return res.status(400).json({ message: 'Não é possível fechar um pedido sem itens.' });
        }
 
        // 2. Verifica o estoque antes de fechar a venda
        for (const item of itensRows) {
            const [produtoRows] = await connection.query('SELECT quantidade FROM produtos WHERE codigo_barras = ?', [item.codigo_barras]);
            const produto = produtoRows[0];
            if (produto.quantidade < item.quantidade) {
                await connection.rollback();
                return res.status(400).json({ message: `Estoque insuficiente para o produto com codigo_barras ${item.codigo_barras}.` });
            }
        }
 
        // 3. Dá baixa no estoque e altera o status da venda e a forma de pagamento
        for (const item of itensRows) {
            await connection.query('UPDATE produtos SET quantidade = quantidade - ? WHERE codigo_barras = ?', [item.quantidade, item.codigo_barras]);
        }
        await connection.query('UPDATE vendas SET status_pedido = ?, forma_pagamento = ?, parcelas = ?, status_pagamento = ? WHERE pedido = ?', ['Concluída', forma_pagamento, parcelas || 1,'Pago', pedido]);
 
        // 4. Lógica para PAGAMENTO PARCELADO vs. PAGAMENTO À VISTA
        const valor_total = venda.valor_total;
        
        if (parcelas > 1) {
            const valor_parcela = valor_total / parcelas;
            for (let i = 1; i <= parcelas; i++) {
                const data_vencimento = new Date();
                data_vencimento.setDate(data_vencimento.getDate() + (i * 30));
 
                await connection.query(
                    'INSERT INTO pagamentos_parcelados (pedido, numero_parcela, valor_parcela, data_vencimento, status_pagamento) VALUES (?, ?, ?, ?, ?)',
                    [pedido, i, valor_parcela, data_vencimento, 'Pendente']
                );
            }
            res.status(200).json({ message: 'Pedido fechado com sucesso! Plano de pagamento parcelado criado.', vendaId: pedido });
 
        } else { // Pagamento à vista (lógica original)
            try {
                await connection.query(
                    'INSERT INTO movimentacoes_caixa (descricao, valor, tipo, referencia_venda_id) VALUES (?, ?, ?, ?)',
                    [`Venda #${pedido} (Concluída)`, valor_total, 'entrada', pedido]
                );
            } catch (caixaError) {
                console.error('Atenção: Erro ao registrar movimentação de caixa para a venda:', pedido, caixaError);
            }
            res.status(200).json({ message: 'Venda fechada com sucesso!', vendaId: pedido });
        }
 
        await connection.commit();
    } catch (error) {
        await connection.rollback();
        console.error('Erro ao fechar pedido de venda:', error);
        res.status(500).json({ message: 'Erro ao fechar pedido de venda.', error: error.message });
    } finally {
        connection.release();
    }
});
*/